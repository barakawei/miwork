<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/security 
    http://www.springframework.org/schema/security/spring-security-3.1.xsd ">


	<global-method-security pre-post-annotations="enabled"/>
	
	<http pattern="/resources/**" security="none"></http>
	<http pattern="/login" security="none"></http>
	<http use-expressions="true" auto-config="true" access-denied-page="/denied">

        <intercept-url pattern="/**" access="isAuthenticated()"/>
		<!-- default-target-url 指定了从登录页面登录后进行跳转的页面 always-use-default-target true表示登录成功后强制跳转 
			authentication-failure-url 表示验证失败后进入的页面 login-processing-url 设置验证登录验证地址，如果不设置，默认是j_spring_security_check 
			username-parameter,password-parameter 设置登录用户名和密码的请求name，默认：j_username,j_password 
			default-target-url="/user/home" -->
		<form-login login-page="/login" always-use-default-target="true"
			authentication-failure-url="/login" login-processing-url="/logincheck"
            authentication-success-handler-ref="successHandler"
			default-target-url="/home" />

		<logout logout-url="/logout" logout-success-url="/login" />
		<!-- error-if-maximum-exceeded 后登陆的账号会挤掉第一次登陆的账号 session-fixation-protection 
			防止伪造sessionid攻击,用户登录成功后会销毁用户当前的session。 -->
		<session-management invalid-session-url="/login"
			session-fixation-protection="none">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</session-management>

		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->

        <remember-me user-service-ref="userDetailService" services-alias = "rememberMeServices" token-validity-seconds = "360000" authentication-success-handler-ref
                ="successHandler"/>

        <!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 -->
		<custom-filter ref="customFilter" before="FILTER_SECURITY_INTERCEPTOR" />

	</http>

	<!-- 登录成功业务处理 -->
	<beans:bean id="successHandler"
		class="com.barakawei.lightwork.security.LoginAuthenticationSuccesssHandler">
	</beans:bean>
	
	<!-- 一个自定义的filter，必须包含authenticationManager, accessDecisionManager,securityMetadataSource三个属性。 -->
	<beans:bean id="customFilter"
		class="com.barakawei.lightwork.security.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>


	<!-- 注意能够为authentication-manager 设置alias别名 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailService">
			<!-- <password-encoder hash="sha"> <salt-source user-property="account" 
				/> </password-encoder> -->
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="userDetailService"
		class="com.barakawei.lightwork.security.UserDetailServiceImpl">
	</beans:bean>


	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
	<beans:bean id="accessDecisionManager"
		class="com.barakawei.lightwork.security.AccessDecisionManager">
	</beans:bean>

	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
	<beans:bean id="securityMetadataSource" init-method="loadResourceDefine"
		class="com.barakawei.lightwork.security.InvocationSecurityMetadataSourceService">
	</beans:bean>
	
	<beans:bean id="expressionHandler" 
          class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
    </beans:bean>

</beans:beans>